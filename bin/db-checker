#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const spawn = require('child_process').spawn;
const leveldown = require('leveldown');

//200Mb is the maximun allowed size for the manifest file.
//It is better to run compaction when the file is bigger than this.
const MAX_MANIFEST_SIZE = 200 * 1024 * 1024;

if (require.main === module) {
  const dbLocation = process.argv[2];
  const manifestFile = fs.readdirSync(dbLocation)
                         .find(f => f.match(/MANIFEST\-\d*/));

  if (manifestFile && fs.statSync(path.join(dbLocation, manifestFile)).size > MAX_MANIFEST_SIZE) {
    console.error('The manifest file is too big, please run repair.');
    return process.exit(1);
  }

  console.log('opening ', dbLocation);
  const db = leveldown(dbLocation);

  const exit = (code) => {
    db.close(() => process.exit(code));
  };

  db.open({
    paranoidChecks: true
  },(err) => {
    if (err) {
      console.log(err.message);
      return exit(1);
    }
    console.log('open!');
    exit(0);
  });

  return;
}

module.exports.check = function(path, callback) {
  const proc = spawn(process.execPath, [ __filename, path ], { stdio: 'pipe' });

  var timedout = false;

  const timeout = setTimeout(() => {
    timedout = true;
    proc.kill(9);
    return callback(new Error('database needs repair'));
  }, 5000);

  proc.once('exit', code => {
    if (timedout) { return; }
    clearTimeout(timeout);
    callback(code !== 0 ? new Error('error checking the database') : null);
  });
}
